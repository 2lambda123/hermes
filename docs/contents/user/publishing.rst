Publishing
==========

Simplest way to start publishing to Hermes is sending POST request on topic endpoint::

    curl -X POST -H "Content-Type: application/json" http://hermes-frontend/topics/group.topic -d '{"message": "Hello world!"}'

Be aware, that topic needs to be defined first! See :doc:`console` for details on how to use console to create topic.

Response format
---------------

Message Id
^^^^^^^^^^

Response will contain special header: ``Hermess-Message-Id``. This is event UUID generated by Hermes, which can be
used to track how event flew through the system.

Response codes
^^^^^^^^^^^^^^

There are two possible response status codes that represent success:

* **201 Created** - event received and been acknowledged by Kafka
* **202 Accepted** - event has not been acknowledged by Kafka, Hermes is buffering it and will try to deliver ASAP

Failure statuses:

* **404 Not Found** - topic does not exist
* **500 Internal Server Error** - something went terribly bad

Buffering
---------

Hermes administrator can set maximum time, for which Hermes will wait for Kafka acknowledgment. By default it is set to
65ms. After that time, **202** response is sent to client. Event is kept in Kafka producer buffer and it's delivery will
be retried until successful.

This makes Hermes resilient to any Kafka malfunctions or hiccups, and we are able to guarantee maximum response
time to clients. Also in case of Kafka cluster failure, Hermes is able to receive incoming events and send them when
Kafka is back online.

Buffer persistence
^^^^^^^^^^^^^^^^^^

By default events are buffered in memory only. This raises question about what happens in case of Hermes node failure
(or force kill of process). Hermes Frontend API exposes callbacks that can be used to implement persistence model of
buffered events.
